basePath: /
definitions:
  main.Response:
    properties:
      message:
        type: string
    type: object
  models.Class:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      img:
        type: string
      isPublic:
        type: boolean
      max_player:
        type: integer
      owner:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationship
      owner_id:
        description: Foreign key
        type: integer
      topic:
        type: string
      updated_at:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.ForgotPasswordResponse:
    properties:
      email:
        type: string
      message:
        type: string
      time:
        type: string
      username:
        type: string
    type: object
  models.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.User:
    properties:
      bio:
        type: string
      created_at:
        type: string
      deleted_at:
        description: Nullable field
        type: string
      discord:
        type: string
      email:
        type: string
      github:
        type: string
      id:
        type: integer
      linkedin:
        type: string
      name:
        type: string
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
      youtube:
        type: string
    type: object
  routes.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  routes.ForgotPasswordRequest:
    properties:
      username:
        type: string
    required:
    - username
    type: object
  routes.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  routes.LoginResponse:
    properties:
      message:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  routes.ResetPasswordRequest:
    properties:
      code:
        type: string
      email:
        type: string
      new_password:
        type: string
    required:
    - code
    - email
    - new_password
    type: object
  routes.UpdateUserRequest:
    properties:
      bio:
        type: string
      discord:
        type: string
      github:
        type: string
      linkedin:
        type: string
      name:
        type: string
      password:
        type: string
      youtube:
        type: string
    type: object
host: localhost:9898
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for managing users, classes, and assembly-related functionality
    in the Assembly Visual Learning Platform
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Assembly Visual Learning Platform API
  version: "1.0"
paths:
  /api-ready:
    get:
      description: Returns a message indicating the API is ready to accept requests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Response'
      summary: Check if API is ready
  /classes:
    get:
      description: Retrieve a list of all classes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Class'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all classes
      tags:
      - Classes
    post:
      consumes:
      - multipart/form-data
      description: Create a new class with the provided details and an optional image
      parameters:
      - description: Class topic
        in: formData
        name: topic
        required: true
        type: string
      - description: Class description
        in: formData
        name: description
        type: string
      - description: Maximum number of players
        in: formData
        name: max_player
        required: true
        type: integer
      - description: Whether the class is public
        in: formData
        name: is_public
        type: boolean
      - description: Class image
        in: formData
        name: img
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Class'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new class
      tags:
      - Classes
  /classes/{id}:
    delete:
      description: Delete a class by its ID
      parameters:
      - description: Class ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a class
      tags:
      - Classes
    get:
      description: Retrieve a class by its ID
      parameters:
      - description: Class ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Class'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a class by ID
      tags:
      - Classes
    put:
      consumes:
      - multipart/form-data
      description: Update a class with the provided details and an optional image
      parameters:
      - description: Class ID
        in: path
        name: id
        required: true
        type: integer
      - description: Class topic
        in: formData
        name: topic
        type: string
      - description: Class description
        in: formData
        name: description
        type: string
      - description: Maximum number of players
        in: formData
        name: max_player
        type: integer
      - description: Whether the class is public
        in: formData
        name: is_public
        type: boolean
      - description: Class image
        in: formData
        name: img
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Class'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a class
      tags:
      - Classes
  /users:
    get:
      description: Retrieve a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/routes.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a user
      tags:
      - Users
    get:
      description: Retrieve a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/routes.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a user
      tags:
      - Users
  /users/forgot-password:
    post:
      consumes:
      - application/json
      description: Send a password reset code to the user's email
      parameters:
      - description: Username for password reset
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/routes.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ForgotPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Forgot password
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with username and password and return a JWT
        token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/routes.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login user
      tags:
      - Users
  /users/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user's password using a verification code
      parameters:
      - description: Reset data
        in: body
        name: reset
        required: true
        schema:
          $ref: '#/definitions/routes.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Reset password
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: '"Enter the token with the `Bearer ` prefix, e.g., `Bearer <token>`"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
